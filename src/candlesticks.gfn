<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="candlesticks" needs-time-series-data="true" minver="2021d" lives-in-subdir="true">
<author email="deferoci@gmail.com">Federico Fiorani and Artur Tarassow</author>
<version>1.0</version>
<date>2022-08-08</date>
<description>Plot candlestick chart</description>
<tags>C10 C58</tags>
<help>
This package creates so called candlestick plots. See here for examples:
http://gnuplot.sourceforge.net/demo_5.4/finance.html

Candlesticks are used to plot financial data. The height of the candlestick is the difference between the opening and closing price, and is called &quot;body&quot;. Above and below the body are the &quot;shadows&quot; that indicate the maximum and minimum price at observation t. If the opening price is lower than the closing price, the body is white or green. If the opening price is higher than the closing price, the body is black or red. For more: https://en.wikipedia.org/wiki/Candlestick_chart

The data frequency must be a time-series with daily observations (5, 6 or 7 days week). If one of the passed series includes missing values for the t-th observation, this observation is ignored for plotting.

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/candlesticks



PUBLIC FUNCTION:

-----------------------------------------------------------------------
Function:       plot_candlesticks(list L, bundle self)

Description:    Main function for creating chart

Arguments:
list L:
        Series in list are in expected order Open, Close, High, Low, (Volume)
        Volume series is optional, and plotted only if show_volume = TRUE

bundle self:
        Optional parameters for controlling the chart. You can pass the
        following parameters:

          show_volume:  bool, Plot the volume chart below candlesticks
                        (default: FALSE)
          show_colors:  bool, Plot colored chart (default: FALSE)
          filename      string, Filename to store chart (default: empty,
          rotate_xtics: scalar, Rotate x-labels by rotate_xtics degrees
                        (default: 0)
          title:        string, Set title of chart (default: &quot;&quot;)
          number_of_xtics:
                        int, Show only every number_of_xtics xtic label
                        (default: 7)

Return:
Nothing.
-----------------------------------------------------------------------


Changelog:
- v1.0, August 2022
    + initial release
</help>
<data-files count="1">
cocacola.gdt </data-files>
<gretl-function name="plot_candlesticks" type="void">
 <params count="2">
  <param name="L" type="list">
<description>Expected order: Open, Close, High, Low,                                 (show_volume)</description>
  </param>
  <param name="self" type="bundle" optional="true"/>
 </params>
<code>/* Main function for generating candlesticks. */
if !exists(self)
  bundle self
endif
bundle self = self + default_values()
run_checks(L, self)
series epoch = epochday($obsdate)
if sum(!ok(L)) &gt; 0
  print &quot;WARNING: Some input series contain missing values. These are ignored.&quot;
  smpl L --no-missing
endif
matrix self.Data = {L}
scalar self.T = rows(self.Data)
scalar self.offset_xtics = floor(self.T / self.number_of_xtics) + 1
#Settings for Y axis
scalar graphH = max(self.Data[,4]) - min(self.Data[,3])
scalar self.minY = floor(min(self.Data[,3]) - graphH * 0.1)
scalar self.maxY = floor(max(self.Data[,4]) + graphH * 0.1) + 1
string self.xtics_string = get_xtics_string(epoch, self.offset_xtics)
string self.xtics_string_volume = get_xtics_volume_string(self.T, self.offset_xtics)
compile_gnuplot_commands(self)
compile_gnuplot_chart(self)
</code>
</gretl-function>
<gretl-function name="run_checks" type="void" private="1">
 <params count="2">
  <param name="L" type="list" const="true"/>
  <param name="self" type="bundle"/>
 </params>
<code># Run initial checks
errorif($datatype != 2, &quot;Dataset must be time-series&quot;)
errorif(($pd &lt; 5 &amp;&amp; $pd &gt; 7), &quot;Time-series dataset must have daily frequency&quot;)
errorif(nelem(L) &lt; 4, &quot;Too few items in list&quot;)
errorif(nelem(L) &lt; 5 &amp;&amp; self.show_volume == TRUE, &quot;Volume series not in list&quot;)
errorif(self.number_of_xtics != floor(self.number_of_xtics), &quot;number_of_xtics must be integer&quot;)
errorif(self.number_of_xtics &lt; 1, &quot;number_of_xtics must be a positive integer&quot;)
</code>
</gretl-function>
<gretl-function name="get_filename" type="string" private="1">
<code># Build unique get_filename for temp plt file
string separator = $windows == TRUE ? &quot;\cdlstk_&quot; : &quot;/cdlstk_&quot;
string unniqueId = sprintf(&quot;%s_%d&quot;, strftime($now[1], &quot;%m%d_%H%M&quot;), randint(1, 10e6))
string filename = $dotdir ~ separator ~ unniqueId ~ &quot;.plt&quot;
return filename
</code>
</gretl-function>
<gretl-function name="get_xtics_string" type="string" private="1">
 <params count="2">
  <param name="epoch" type="series" const="true"/>
  <param name="offset" type="scalar" const="true"/>
 </params>
<code># Compile gnuplot string for xtics
scalar T = nobs(epoch)
string str = &quot;set xtics (&quot; ~ sprintf(&quot;\&quot;%s\&quot; %d&quot;, isodate(epoch[1], TRUE), 0)
loop for (i = offset + 1; i &lt;= T; i += offset)
  str ~= sprintf(&quot;, \&quot;%s\&quot; %d&quot;, isodate(epoch[i], TRUE), i-1)
endloop
str ~= &quot;)&quot;
return str
</code>
</gretl-function>
<gretl-function name="get_xtics_volume_string" type="string" private="1">
 <params count="2">
  <param name="T" type="scalar" const="true"/>
  <param name="sp" type="scalar" const="true"/>
 </params>
<code># Compile gnuplot string for xtics of volume subplot
string str = &quot;set xtics (&quot; ~ sprintf(&quot;\&quot;          \&quot; %d&quot;, 0)
loop for (i = sp + 1; i &lt;= T; i += sp)
  str ~= sprintf(&quot;, \&quot;          \&quot; %d&quot;, i-1)
endloop
str ~= &quot;)&quot;
return str
</code>
</gretl-function>
<gretl-function name="compile_gnuplot_commands" type="void" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code># Compile the actual gnuplot code
string filename = self.input_filename
outfile &quot;@filename&quot; --quiet
  printf(&quot;set yrange [%g:%g]\n&quot;, self.minY, self.maxY)
  printf(&quot;set xrange [-1:%d]\n&quot;, (self.T + 5))
  printf(&quot;set ytics %g, %g\n&quot;, self.minY, (self.maxY - self.minY) / 10)
  printf(&quot;set grid\n&quot;)
  printf(&quot;set ytics nomirror\n&quot;)
  printf(&quot;set format y \&quot;\%.1f\&quot;\n&quot;)
  printf(&quot;set format x (\&quot;\%.0f\&quot;)\n&quot;)
  printf(&quot;set xrange [-1:%d]\n&quot;, self.T)
  if self.show_volume
    printf(&quot;%s\n&quot;, self.xtics_string_volume)
  else
    printf(&quot;%s\n&quot;, self.xtics_string)
  endif
  if self.rotate_xtics
    printf(&quot;set xtics nomirror rotate by %g right\n&quot;, self.rotate_xtics)
  endif
  printf(&quot;unset colorbox\n&quot;)
  printf(&quot;set title \&quot;%s\&quot;\n&quot;, self.title)
  if self.show_volume
    printf(&quot;set multiplot\n&quot;)
    printf(&quot;set size 1, 0.7\n&quot;)
    printf(&quot;set origin 0, 0.3\n&quot;)
    printf(&quot;set bmargin 0\n&quot;)
    printf(&quot;set format x \&quot;\&quot;\n&quot;)
  endif
  printf(&quot;set lt 10 lw 1 lc rgb \&quot;black\&quot;\n&quot;)
  printf(&quot;set style fill solid border lt 10\n&quot;)
  if self.show_colors
    printf(&quot;set palette defined (-1 'red', 1 'green')\n&quot;)
  else
    printf(&quot;set palette defined (-1 'black', 1 'white')\n&quot;)
  endif
  printf(&quot;set boxwidth 0.5 relative\n&quot;)
  printf(&quot;set cbrange [-1:1]\n&quot;)
  printf(&quot;plot '-' using 0:1:2:3:4:($4 &lt; $1 ? -1 : 1) notitle with candlesticks lt 10 palette\n&quot;)
  loop i=1..self.T
    printf(&quot;%g %g %g %g\n&quot;, self.Data[i,1], self.Data[i,3], self.Data[i,4], self.Data[i,2])
  endloop
  printf(&quot;e\n&quot;)
  if self.show_volume
    printf(&quot;unset label 1\n&quot;)
    printf(&quot;unset label 2\n&quot;)
    printf(&quot;unset title\n&quot;)
    printf(&quot;set xtics mirror\n&quot;)
    printf(&quot;%s\n&quot;, self.xtics_string)
    printf(&quot;set ytics nomirror\n&quot;)
    printf(&quot;set bmargin\n&quot;)
    printf(&quot;set format x\n&quot;)
    printf(&quot;set size 1.0, 0.3\n&quot;)
    printf(&quot;set origin 0.0, 0.0\n&quot;)
    printf(&quot;set tmargin 0\n&quot;)
    printf(&quot;unset logscale y\n&quot;)
    printf(&quot;set yrange [0:%d]\n&quot;, maxc(self.Data[,5])*1.2)
    printf(&quot;set format y \&quot;\%.0s \%c\&quot;\n&quot;)
    printf(&quot;set ytics 0, %d, %d\n&quot;, maxc(self.Data[,5])/5, maxc(self.Data[,5]))
    printf(&quot;set style line 1 lw 3\n&quot;)
    printf(&quot;set style fill solid border lt 1\n&quot;)
    printf(&quot;unset colorbox\n&quot;)
    printf(&quot;set lt 10 lw 1 lc rgb \&quot;black\&quot;\n&quot;)
    printf(&quot;set style fill solid border lt 10\n&quot;)
    if self.show_colors
      printf(&quot;set palette defined (-1 'red', 1 'green')\n&quot;)
    else
      printf(&quot;set palette defined (-1 'black', 1 'white')\n&quot;)
    endif
    printf(&quot;plot '-' using 0:1:($3 &lt; $2 ? -1 : 1) notitle with boxes palette\n&quot;)
    loop i=1..self.T
      printf(&quot;%d %g %g\n&quot;, self.Data[i,5], self.Data[i,1], self.Data[i,2])
    endloop
    printf(&quot;e\n&quot;)
    printf(&quot;unset multiplot\n&quot;)
  endif
end outfile
</code>
</gretl-function>
<gretl-function name="default_values" type="bundle" private="1">
<code># Set default values for main bundle
bundle self
scalar self.show_volume = FALSE
scalar self.show_colors = FALSE
string self.input_filename = get_filename()
string self.filename = &quot;display&quot;
scalar self.rotate_xtics = 0
string self.title = &quot;&quot;
scalar self.number_of_xtics = 7
return self
</code>
</gretl-function>
<gretl-function name="compile_gnuplot_chart" type="void" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Actual call of gnuplot command. */
string input_filename = self.input_filename
string output_filename = self.filename
gnuplot --input=&quot;@input_filename&quot; --output=&quot;@output_filename&quot;
remove(&quot;@input_filename&quot;)  # clean up temporary *.gp file
</code>
</gretl-function>
<sample-script>
clear
set verbose off

# Load function packages
include candlesticks.gfn

# Prepare the dataset and variables
open cocacola.gdt --frompkg=candlesticks
list L = 3..7

# Most basic call
plot_candlesticks(L, _(filename=&quot;candlestick.png&quot;))

#plot_candlesticks(L)
stop

# Colored plot
plot_candlesticks(L, _(show_colors=TRUE))

# Add a subplot showing the trade volume
plot_candlesticks(L, _(show_volume=TRUE))

# Add a title
plot_candlesticks(L,  _(show_volume=TRUE, show_colors=TRUE,
                  title=&quot;Coca Cola (KO)&quot;))

# Rotate xtics
plot_candlesticks(L,  _(show_volume=TRUE, show_colors=TRUE, rotate_xtics=45))

# Store chart locally
plot_candlesticks(L, _(filename=&quot;candlestick.png&quot;))
</sample-script>
</gretl-function-package>
</gretl-functions>
